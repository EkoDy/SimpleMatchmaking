{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>SimpleMatchmaking is a module built with ease of use and customizability in mind using ROBLOX's MemoryStoreService. It works by publishing match instances to a SortedMap for easy and fast editing. The module makes use of the behavior of the native UpdateAsync function to allow all servers to access the SortedMap instead of having one central server handle all the work.</p> <p>Warning</p> <p>SimpleMatchmaking has not been tested in a production environment. If you encounter any issue please let me know.</p>"},{"location":"#methods","title":"Methods","text":""},{"location":"#getqueue","title":"GetQueue","text":"<p>This function returns a MatchmakingQueue class with the provided name and options. Subsequent calls with the same name and options will return the same Queue.</p> <p>Warning</p> <p>Calling GetAsync multiple times with the same name but different options will cause issues such as having matches with different number of teams in the same queue.</p> <p>Parameters</p> name: String The name of the queue. options The options needed to set the parameters of the queue and its behavior. <p>Result</p> MatchmakingQueue The class that exposes access to the different functions useful to manage the data. <p></p>"},{"location":"#newoptions","title":"NewOptions","text":"<p>This function creates and returns a new QueueOptions class.</p> <p>Parameters  no parameters needed.</p> <p>Result</p> QueueOptions The class used to set all the different options to customize a queue."},{"location":"MatchmakingQueue/","title":"MatchmakingQueue","text":"<p>Provides access to a queue and all the functions to manage data/matchmaking.</p>"},{"location":"MatchmakingQueue/#general-methods","title":"General methods","text":""},{"location":"MatchmakingQueue/#queueplayers","title":"QueuePlayers","text":"<p>The built in function to find a match for the given array of players.</p> <p>Parameters</p> players: Object The array of the player(s) looking for a match. <p>Result</p> Success: bool Returns true if a match was found/created.         Returns false if the operation failed. Credentials: Object The dictionary containing the MatchId and the AccessCode of the match. <p></p>"},{"location":"MatchmakingQueue/#checkplayerteam","title":"CheckPlayerTeam","text":"<p>This function can be used to retrieve a player's team, if they are in one.</p> <p>Parameters</p> player: Player The player to retrieve the team of. <p>Result</p> Success: bool Returns true if the player's team was found.         Returns false if the operation failed or the player is not in a team. Team: String The retrieved team. <p></p>"},{"location":"MatchmakingQueue/#creatematchasync","title":"CreateMatchAsync","text":"<p>This function creates and publishes a new match instance returning the credentials of the new match. The function also supports an optional players parameter to automatically add players to the match before publishing.</p> <p>Parameters</p> players: Object (optional) The array of the player(s) to be added to the match. <p>Result</p> Credentials: Object The dictionary containing the MatchId and the AccessCode of the new match."},{"location":"MatchmakingQueue/#core-methods","title":"Core methods","text":""},{"location":"MatchmakingQueue/#addasync","title":"AddAsync","text":"<p>This function compiles a server instance from the passed credentials and adds it to the queue returning the added server instance and the number of players in the match.</p> <p>Parameters</p> credentials: Tuple The dictionary containing the MatchId and the AccessCode of the match. <p>Result</p> success: bool Returns true the operation was successful.         Returns false if the operation failed. newServer: Object The server instance added to the queue. numberOfPlayers: Object The number of players in the match. <p></p>"},{"location":"MatchmakingQueue/#readasync","title":"ReadAsync","text":"<p>This function accepts a MatchId and returns the server instance in the queue, if there is one.</p> <p>Parameters</p> matchId: String The indentifier string of the server. <p>Result</p> server: Object The server instance associated to the giver MatchId. numberOfPlayers: Number The number of players in the match. <p></p>"},{"location":"MatchmakingQueue/#removeasync","title":"RemoveAsync","text":"<p>This function accepts a MatchId and a callback function and returns the updates server instance and the player count.</p> <p>Parameters</p> matchId: String The indentifier string of the server. <p>Result</p> success: bool Returns true the operation was successful.         Returns false if the operation failed. <p></p>"},{"location":"MatchmakingQueue/#getrangeasync","title":"GetRangeAsync","text":"<p>This function can be used to get a number of server instances from the queue. The amount returned is currently fixed to <code>10</code>. An optional players parameter can be passed to make the function ignore matches that don't have enough space for the players.</p> <p>Parameters</p> players: Object (optional) The array of the player(s) to be added to the match. <p>Result</p> success: bool Returns true the operation was successful.         Returns false if the operation failed. servers: Tuple The array of the matches found by the function."},{"location":"ProjectLicense/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Dyamond</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"QueueOptions/","title":"QueueOptions","text":"<p>The QueueOptions class is returned by the newOptions method and it contains all the parameters needed to customize a queue.</p> <p>Tip</p> <p>The server size should be bigger than the maximum amount of players you are planning to have in a single match to allow possible spectators and moderators to join the match.</p>"},{"location":"QueueOptions/#properties","title":"Properties","text":"<p>MatchPlaceId : number  The PlaceId where the players will be teleported to.</p> <p>NumberOfTeams : number  The number of teams in the match.</p> <p>MaxPlayersPerTeam : number  The maximum number of players in a team.</p> <p>MatchExpirationTime : number  <code>Optional</code>  The time in seconds the match will be available in the queue before being automatically deleted by ROBLOX's servers.</p> <p>Default value: 600 (5 minutes)</p> <p>UseCustomTeleporting : number  <code>Optional</code>  This setting can be used to chose if the module should use the bult-in teleport function or let you handle teleporting and skip the built-in function entirely.</p> <p>Default value: true</p>"},{"location":"Roadmap/","title":"Updates Roadmap","text":""},{"location":"Roadmap/#upcoming-updates","title":"Upcoming updates","text":"<ul> <li>A better function to handle arriving players in the match server.</li> <li>An option to not save UserIds when queueing for games with teams of 1 player each.</li> <li>A fix to make AddAsync and CreateMatchAsync more consistent with their expected behavior.</li> <li>Make rquests scale with the amount of players passed in QueuePlayers.</li> <li>Add a way to support ranks and map selection.</li> </ul>"},{"location":"Roadmap/#delivered-updates","title":"Delivered updates","text":""},{"location":"Roadmap/#v020-beta-29-feb-2024","title":"v0.2.0-beta <code>29 Feb 2024</code>","text":"<ul> <li>Added an option to disable the built in teleport function.</li> <li>Implemented SortKeys.</li> <li>Added checks to not make CreateMatchAsync and TeleportPlayers functions error in studio.</li> </ul>"}]}